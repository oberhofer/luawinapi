#
# Declaration file with WinAPI functions
#

#######################################################################
# kernel32.dll
  
WINBASEAPI DWORD WINAPI GetLastError();
WINBASEAPI VOID WINAPI SetLastError(DWORD);

WINBASEAPI BOOL WINAPI CloseHandle(HANDLE hObject);
# WINBASEAPI BOOL WINAPI CompareObjectHandles(HANDLE, HANDLE);
# WINBASEAPI BOOL WINAPI DuplicateHandle(HANDLE, HANDLE, HANDLE, [out]LPHANDLE, DWORD, BOOL, DWORD);
WINBASEAPI BOOL WINAPI GetHandleInformation(HANDLE, [out]DWORD);
WINBASEAPI BOOL WINAPI SetHandleInformation(HANDLE, DWORD, DWORD);

# WINBASEAPI DWORD WINAPI GetModuleFileNameA(HMODULE, LPSTR, DWORD);

# WINBASEAPI DWORD WINAPI GetModuleFileNameW(HMODULE,[out,sizeparam=nSize]LPWSTR lpFilename, DWORD nSize);
[skipimpl] WINBASEAPI DWORD WINAPI GetModuleFileNameW(HMODULE);

# WINBASEAPI HMODULE WINAPI GetModuleHandleA(LPCSTR);
WINBASEAPI HMODULE WINAPI GetModuleHandleW([nullisvalid]LPCWSTR);

# WINBASEAPI BOOL WINAPI GetModuleHandleExA(DWORD, LPCSTR, HMODULE);
WINBASEAPI BOOL WINAPI GetModuleHandleExW(DWORD, LPCWSTR, [out]HMODULE);

[notCE] WINBASEAPI VOID WINAPI OutputDebugStringA(LPCSTR);
WINBASEAPI VOID WINAPI OutputDebugStringW(LPCWSTR);

WINBASEAPI BOOL WINAPI GetVersionExW(OSVERSIONINFOW);
# [notCE] WINBASEAPI BOOL VerifyVersionInfoW(OSVERSIONINFOEXW, DWORD, DWORDLONG);

WINBASEAPI BOOL WINAPI CreateProcessW([nullisvalid]LPCWSTR, [nullisvalid]LPWSTR_LOCALCOPY, [nullisvalid]SECURITY_ATTRIBUTES, [nullisvalid]SECURITY_ATTRIBUTES, BOOL, DWORD, [nullisvalid]LPVOID, [nullisvalid]LPCWSTR, [nullisvalid]STARTUPINFOW, [nullisvalid]PROCESS_INFORMATION);
# WINBASEAPI BOOL WINAPI SetProcessShutdownParameters(DWORD, DWORD);
# WINBASEAPI BOOL WINAPI GetProcessShutdownParameters([out]DWORD, [out]DWORD);
# WINBASEAPI DWORD WINAPI GetProcessVersion(DWORD);
# WINBASEAPI VOID WINAPI FatalAppExitW(UINT, LPCWSTR);
# WINBASEAPI VOID WINAPI GetStartupInfoW(STARTUPINFOW);
# WINBASEAPI LPWSTR WINAPI GetCommandLineW(VOID);
# WINBASEAPI DWORD WINAPI GetEnvironmentVariableW(LPCWSTR, LPWSTR, DWORD);
# WINBASEAPI BOOL WINAPI SetEnvironmentVariableW(LPCWSTR, LPCWSTR);
# WINBASEAPI DWORD WINAPI ExpandEnvironmentStringsW(LPCWSTR, LPWSTR, DWORD);
# WINBASEAPI DWORD WINAPI GetFirmwareEnvironmentVariableW(LPCWSTR, LPCWSTR, PVOID, DWORD);
# WINBASEAPI BOOL WINAPI SetFirmwareEnvironmentVariableW(LPCWSTR, LPCWSTR, PVOID, DWORD);

WINBASEAPI VOID   WINAPI Sleep(DWORD);
WINBASEAPI HANDLE WINAPI CreateMutexW([nullisvalid]SECURITY_ATTRIBUTES, BOOL, LPCWSTR);
WINBASEAPI HANDLE WINAPI CreateEventW([nullisvalid]SECURITY_ATTRIBUTES, BOOL, BOOL, LPCWSTR);
WINBASEAPI HANDLE WINAPI OpenEventW(DWORD, BOOL, LPCWSTR);
WINBASEAPI HANDLE WINAPI CreateSemaphoreW([nullisvalid]SECURITY_ATTRIBUTES, LONG, LONG, LPCWSTR);

WINBASEAPI BOOL   WINAPI SetEvent(HANDLE);
WINBASEAPI BOOL   WINAPI ResetEvent(HANDLE);
WINBASEAPI BOOL   WINAPI PulseEvent(HANDLE);

WINBASEAPI BOOL   WINAPI ReleaseSemaphore(HANDLE, LONG, [out] LONG);
WINBASEAPI BOOL   WINAPI ReleaseMutex(HANDLE);
WINBASEAPI DWORD  WINAPI WaitForSingleObject(HANDLE, DWORD);
# WINBASEAPI DWORD WINAPI WaitForMultipleObjects(DWORD, CONST HANDLE *, BOOL, DWORD);
WINBASEAPI BOOL   WINAPI GetExitCodeThread(HANDLE, [out] DWORD);
WINBASEAPI BOOL   WINAPI GetExitCodeProcess(HANDLE, [out] DWORD);

#######################################################################
# user32.dll

WINBASEAPI HGLOBAL WINAPI LoadResource(HMODULE, HRSRC);
WINBASEAPI DWORD WINAPI SizeofResource(HMODULE, HRSRC);

WINBASEAPI ATOM WINAPI GlobalDeleteAtom(ATOM);
WINBASEAPI BOOL WINAPI InitAtomTable(DWORD);
WINBASEAPI ATOM WINAPI DeleteAtom(ATOM);
  
WINUSERAPI ATOM WINAPI RegisterClassW(WNDCLASSW);
WINUSERAPI BOOL WINAPI UnregisterClassW(LPCWSTR,HINSTANCE);
WINUSERAPI BOOL WINAPI GetClassInfoW(HINSTANCE,LPCWSTR,WNDCLASSW);

[notCE] WINUSERAPI ATOM WINAPI RegisterClassExW(WNDCLASSEXW);
[notCE] WINUSERAPI BOOL WINAPI GetClassInfoExW(HINSTANCE,LPCWSTR,WNDCLASSEXW);

WINUSERAPI HWND WINAPI CreateWindowExW(DWORD,LPCWSTR_OR_ATOM,LPCWSTR,DWORD,int,int,int,int,HWND,HMENU,HINSTANCE,[luaref] PVOID);

WINUSERAPI HWND WINAPI GetDesktopWindow();

WINUSERAPI BOOL WINAPI IsWindow(HWND);
WINUSERAPI BOOL WINAPI IsWindowVisible(HWND);
WINUSERAPI BOOL WINAPI IsWindowEnabled(HWND);
WINUSERAPI BOOL WINAPI IsChild(HWND,HWND);
WINUSERAPI BOOL WINAPI DestroyWindow(HWND);
WINUSERAPI BOOL WINAPI ShowWindow(HWND,int);
WINUSERAPI BOOL WINAPI EnableWindow(HWND,int);
WINUSERAPI BOOL WINAPI UpdateWindow(HWND);
WINUSERAPI BOOL WINAPI RedrawWindow(HWND,RECT,HRGN,UINT);
WINUSERAPI HWND WINAPI SetParent(HWND,HWND);
WINUSERAPI HWND WINAPI GetParent(HWND);
WINUSERAPI HWND WINAPI FindWindowW(LPCWSTR_OR_ATOM, [nullisvalid]LPCWSTR);

WINUSERAPI HWND WINAPI SetActiveWindow(HWND);
WINUSERAPI HWND WINAPI GetActiveWindow();

# Keyboard

WINUSERAPI SHORT WINAPI GetKeyState(int);
WINUSERAPI SHORT WINAPI GetAsyncKeyState(int);
WINUSERAPI BOOL WINAPI GetKeyboardState([out] BYTE);
WINUSERAPI BOOL WINAPI SetKeyboardState([out] BYTE);
# WINUSERAPI int WINAPI GetKeyNameTextA(LONG,LPSTR,int);
WINUSERAPI int WINAPI GetKeyNameTextW(LONG,[out,sizeparam=cchSize]LPWSTR,int cchSize);
WINUSERAPI int WINAPI GetKeyboardType(int);

# WINUSERAPI int WINAPI ToAscii(UINT,UINT,CONST BYTE*,LPWORD,UINT);
# WINUSERAPI int WINAPI ToAsciiEx(UINT,UINT,CONST BYTE*,LPWORD,UINT,HKL);
# WINUSERAPI int WINAPI ToUnicode(UINT,UINT,CONST BYTE*,LPWSTR,int,UINT);

WINUSERAPI DWORD WINAPI OemKeyScan(WORD);
# WINUSERAPI SHORT WINAPI VkKeyScanA(CHAR);
WINUSERAPI SHORT WINAPI VkKeyScanW(WCHAR);
# WINUSERAPI SHORT WINAPI VkKeyScanExA(CHAR,HKL);
# WINUSERAPI SHORT WINAPI VkKeyScanExW(WCHAR,HKL);

WINUSERAPI VOID WINAPI keybd_event(BYTE,BYTE,DWORD,ULONG_PTR);
WINUSERAPI VOID WINAPI mouse_event(DWORD,DWORD,DWORD,DWORD,ULONG_PTR);
#if (_WIN32_WINNT > 0x0400)
# WINUSERAPI UINT WINAPI SendInput(UINT,LPINPUT,int);
#endif /* (_WIN32_WINNT > 0x0400) */


WINUSERAPI BOOL WINAPI DrawMenuBar(HWND);
WINUSERAPI HMENU WINAPI CreateMenu();
WINUSERAPI HMENU WINAPI CreatePopupMenu();
WINUSERAPI BOOL WINAPI DestroyMenu(HMENU);

WINUSERAPI DWORD WINAPI CheckMenuItem(HMENU,UINT,UINT);
WINUSERAPI BOOL WINAPI EnableMenuItem(HMENU,UINT,UINT);
WINUSERAPI HMENU WINAPI GetSubMenu(HMENU,int);

[notCE] WINUSERAPI UINT WINAPI GetMenuItemID(HMENU,int);
[notCE] WINUSERAPI int WINAPI GetMenuItemCount(HMENU);

WINUSERAPI BOOL WINAPI InsertMenuW(HMENU,UINT,UINT,HANDLE_OR_UINT,LPCWSTR);

WINUSERAPI BOOL WINAPI AppendMenuW(HMENU,UINT,HANDLE_OR_UINT,LPCWSTR);

WINUSERAPI BOOL WINAPI RemoveMenu(HMENU,UINT,UINT);
WINUSERAPI BOOL WINAPI DeleteMenu(HMENU,UINT,UINT);

WINUSERAPI BOOL WINAPI TrackPopupMenu(HMENU,UINT,int,int,int,HWND,[nullisvalid]RECT);
WINUSERAPI BOOL WINAPI TrackPopupMenuEx(HMENU,UINT,int,int,HWND,[nullisvalid]TPMPARAMS);

[notCE] WINUSERAPI BOOL WINAPI InsertMenuItemW(HMENU,UINT,BOOL,MENUITEMINFOW);

WINUSERAPI BOOL WINAPI GetMenuItemInfoW(HMENU,UINT,BOOL,MENUITEMINFOW);
WINUSERAPI BOOL WINAPI SetMenuItemInfoW(HMENU,UINT,BOOL,MENUITEMINFOW);

# not within Windows CE
[notCE] WINUSERAPI BOOL WINAPI IsMenu(HMENU);
[notCE] WINUSERAPI BOOL WINAPI CloseWindow(HWND);
[notCE] WINUSERAPI BOOL WINAPI SetMenuItemBitmaps(HMENU,UINT,UINT,HBITMAP,HBITMAP);
[notCE] WINUSERAPI LONG WINAPI GetMenuCheckMarkDimensions();
[notCE] WINUSERAPI BOOL WINAPI ModifyMenuW(HMENU,UINT,UINT,HANDLE_OR_UINT,LPCWSTR);

WINUSERAPI BOOL WINAPI MoveWindow(HWND,int,int,int,int,BOOL);
WINUSERAPI BOOL WINAPI SetWindowPos(HWND,HWND,int,int,int,int,UINT);
[notCE] WINUSERAPI BOOL WINAPI GetWindowPlacement(HWND, WINDOWPLACEMENT);
[notCE] WINUSERAPI BOOL WINAPI SetWindowPlacement(HWND, WINDOWPLACEMENT);
#WINUSERAPI HDWP WINAPI BeginDeferWindowPos(int);
#WINUSERAPI HDWP WINAPI DeferWindowPos(HDWP,HWND,HWND,int,int,int,int,UINT);
#WINUSERAPI BOOL WINAPI EndDeferWindowPos(HDWP);

#WINUSERAPI BOOL WINAPI IsIconic(HWND);
#WINUSERAPI BOOL WINAPI AnyPopup();
WINUSERAPI BOOL WINAPI BringWindowToTop(HWND);
#WINUSERAPI BOOL WINAPI IsZoomed(HWND);

WINUSERAPI HWND WINAPI GetForegroundWindow();
WINUSERAPI BOOL WINAPI SetForegroundWindow(HWND);

WINUSERAPI HWND WINAPI SetFocus(HWND);
WINUSERAPI HWND WINAPI GetFocus();

WINUSERAPI BOOL WINAPI SwapMouseButton(BOOL);
WINUSERAPI DWORD WINAPI GetMessagePos();
WINUSERAPI LONG WINAPI GetMessageTime();
WINUSERAPI LPARAM WINAPI GetMessageExtraInfo();
WINUSERAPI LPARAM WINAPI SetMessageExtraInfo(LPARAM);

#WINUSERAPI UINT WINAPI RegisterWindowMessageA(LPCSTR);
WINUSERAPI UINT WINAPI RegisterWindowMessageW(LPCWSTR);

WINUSERAPI BOOL WINAPI GetMessageW (MSG,HWND,UINT,UINT);
WINUSERAPI BOOL WINAPI PostMessageW(HWND,UINT,WPARAM,LPARAM);
WINUSERAPI BOOL WINAPI PostThreadMessageW(DWORD,UINT,WPARAM,LPARAM);
WINUSERAPI LRESULT WINAPI SendMessageW(HWND,[notnil]UINT,WPARAM,LPARAM);
WINUSERAPI BOOL WINAPI PeekMessageW(MSG,HWND,UINT,UINT,UINT);

# not within Windows CE
[notCE] WINUSERAPI BOOL WINAPI WaitMessage();
[notCE] WINUSERAPI DWORD WINAPI WaitForInputIdle(HANDLE,DWORD);

WINUSERAPI BOOL WINAPI TranslateMessage(MSG);
WINUSERAPI LRESULT WINAPI DispatchMessageW(MSG);


WINUSERAPI BOOL WINAPI IsDialogMessageW(HWND,MSG);


WINUSERAPI HACCEL WINAPI CreateAcceleratorTableW(ACCEL, int);
WINUSERAPI BOOL WINAPI TranslateAcceleratorW(HWND,HACCEL,MSG);

WINUSERAPI LRESULT WINAPI DefWindowProcW(HWND,UINT,WPARAM,LPARAM);
WINUSERAPI LRESULT WINAPI CallWindowProcW(WNDPROC,HWND,UINT,WPARAM,LPARAM);

WINUSERAPI LONG WINAPI GetWindowLongW(HWND, int);
WINUSERAPI LONG WINAPI SetWindowLongW(HWND,int,HANDLE_OR_UINT);

WINUSERAPI VOID WINAPI PostQuitMessage(int);

WINUSERAPI HDC  WINAPI GetDC(HWND);
WINUSERAPI HDC WINAPI GetDCEx(HWND,HRGN,DWORD);
WINUSERAPI HDC WINAPI GetWindowDC(HWND);
WINUSERAPI int  WINAPI ReleaseDC(HWND,HDC);
WINUSERAPI HDC  WINAPI BeginPaint(HWND,PAINTSTRUCT);
WINUSERAPI BOOL WINAPI EndPaint(HWND,PAINTSTRUCT);

WINUSERAPI BOOL WINAPI InvalidateRect(HWND,[nullisvalid]RECT,BOOL);
WINUSERAPI BOOL WINAPI ValidateRect(HWND,RECT);

WINUSERAPI BOOL WINAPI GetClientRect(HWND,RECT);
WINUSERAPI BOOL WINAPI GetWindowRect(HWND,RECT);

WINUSERAPI BOOL WINAPI ClientToScreen(HWND,POINT); 
WINUSERAPI BOOL WINAPI ScreenToClient(HWND,POINT); 
WINUSERAPI int  WINAPI MapWindowPoints(HWND,HWND,POINT,UINT);

WINUSERAPI BOOL WINAPI GetCursorPos(POINT);

WINUSERAPI HWND WINAPI GetCapture();
WINUSERAPI HWND WINAPI SetCapture(HWND);
WINUSERAPI BOOL WINAPI ReleaseCapture();

[notCE] WINUSERAPI BOOL WINAPI AdjustWindowRect(RECT,DWORD,BOOL);
WINUSERAPI BOOL WINAPI AdjustWindowRectEx(RECT,DWORD,BOOL,DWORD);

WINUSERAPI int WINAPI MessageBoxW([nullisvalid]HWND,LPCWSTR,LPCWSTR,UINT);
[notCE] WINUSERAPI int WINAPI MessageBoxExW([nullisvalid]HWND,LPCWSTR,LPCWSTR,UINT,WORD);
#WINUSERAPI int WINAPI MessageBoxIndirectW(CONST MSGBOXPARAMSW*);

WINUSERAPI BOOL WINAPI MessageBeep(UINT);
[notCE] WINUSERAPI BOOL WINAPI Beep(DWORD,DWORD);

WINUSERAPI BOOL WINAPI CreateCaret(HWND, HBITMAP, int, int);
WINUSERAPI BOOL WINAPI DestroyCaret();
WINUSERAPI BOOL WINAPI HideCaret(HWND);
WINUSERAPI BOOL WINAPI ShowCaret(HWND);
WINUSERAPI BOOL WINAPI SetCaretPos(int, int);
WINUSERAPI BOOL WINAPI GetCaretPos(POINT);
WINUSERAPI BOOL WINAPI SetCaretBlinkTime(UINT);
WINUSERAPI UINT WINAPI GetCaretBlinkTime();

[notCE] WINUSERAPI HWND WINAPI GetTopWindow(HWND);
[notCE] WINUSERAPI HWND WINAPI GetLastActivePopup(HWND);
WINUSERAPI HWND WINAPI GetWindow(HWND,UINT);

WINUSERAPI BOOL WINAPI RegisterHotKey(HWND, int, UINT, UINT);
WINUSERAPI BOOL WINAPI UnregisterHotKey(HWND, int);
[onlyCE] WINUSERAPI BOOL WINAPI AllKeys(BOOL);

WINUSERAPI DWORD WINAPI GetSysColor(int);
WINUSERAPI HBRUSH WINAPI GetSysColorBrush(int);

WINUSERAPI BOOL WINAPI DrawFocusRect(HDC,RECT);
WINUSERAPI BOOL WINAPI DrawEdge(HDC,RECT,UINT,UINT);
WINUSERAPI BOOL WINAPI DrawFrameControl(HDC,RECT,UINT,UINT);
[notCE] WINUSERAPI BOOL WINAPI DrawCaption(HWND,HDC,RECT,UINT);
[notCE] WINUSERAPI BOOL WINAPI DrawAnimatedRects(HWND,int,RECT,RECT);

# WINUSERAPI BOOL WINAPI DrawIcon(HDC,int,int,HICON);
WINUSERAPI int WINAPI DrawTextW(HDC,LPCWSTR,int,RECT,UINT);
# WINUSERAPI int WINAPI DrawTextExW(HDC,LPWSTR,int,RECT,UINT,DRAWTEXTPARAMS);
# WINUSERAPI BOOL WINAPI GrayStringW(HDC,HBRUSH,GRAYSTRINGPROC,LPARAM,int,int,int,int,int);
# WINUSERAPI BOOL WINAPI DrawStateW(HDC,HBRUSH,DRAWSTATEPROC,LPARAM,WPARAM,int,int,int,int,UINT);
# WINUSERAPI LONG WINAPI TabbedTextOutW(HDC,int,int,LPCWSTR,int,int,CONST INT*,int);
# WINUSERAPI DWORD WINAPI GetTabbedTextExtentW(HDC,LPCWSTR,int,int,CONST INT*);

WINUSERAPI int WINAPI FillRect(HDC,RECT,HBRUSH);
[notCE] WINUSERAPI int WINAPI FrameRect(HDC,RECT,HBRUSH);
WINUSERAPI BOOL WINAPI InvertRect(HDC,RECT);

WINUSERAPI HICON WINAPI LoadIconW(HINSTANCE,RESOURCEREF);
# WINUSERAPI HICON WINAPI CreateIcon(HINSTANCE,int,int,BYTE,BYTE,CONST BYTE*,CONST BYTE*);
WINUSERAPI BOOL WINAPI DestroyIcon(HICON);
#WINUSERAPI int WINAPI LookupIconIdFromDirectory(PBYTE,BOOL);
#WINUSERAPI int WINAPI LookupIconIdFromDirectoryEx(PBYTE,BOOL,int,int,UINT);
#WINUSERAPI HICON WINAPI CreateIconFromResource(PBYTE,DWORD,BOOL,DWORD);
#WINUSERAPI HICON WINAPI CreateIconFromResourceEx(PBYTE,DWORD,BOOL,DWORD,int,int,UINT);

WINUSERAPI HANDLE WINAPI LoadImageW(HINSTANCE,RESOURCEREF,UINT,int,int,UINT);
WINUSERAPI HCURSOR WINAPI LoadCursorW(HINSTANCE,RESOURCEREF);

WINUSERAPI HCURSOR WINAPI SetCursor(HCURSOR);

## dialog functions

WINUSERAPI HWND WINAPI CreateDialogParamW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);
WINUSERAPI HWND WINAPI CreateDialogIndirectParamW(HINSTANCE,DLGTEMPLATE,HWND,DLGPROC,LPARAM);

WINUSERAPI INT_PTR WINAPI DialogBoxParamW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);
WINUSERAPI INT_PTR WINAPI DialogBoxIndirectParamW(HINSTANCE,DLGTEMPLATE,HWND,DLGPROC,LPARAM);

WINUSERAPI BOOL WINAPI EndDialog(HWND,INT_PTR);
WINUSERAPI HWND WINAPI GetDlgItem(HWND,int);
WINUSERAPI BOOL WINAPI SetDlgItemInt(HWND,int,UINT,BOOL);
WINUSERAPI UINT WINAPI GetDlgItemInt(HWND,int,[out] BOOL,BOOL);
WINUSERAPI BOOL WINAPI SetDlgItemTextW(HWND,int,LPCWSTR);
WINUSERAPI UINT WINAPI GetDlgItemTextW(HWND,int,[out,sizeparam=cchMax]LPWSTR,int cchMax);
WINUSERAPI BOOL WINAPI CheckDlgButton(HWND,int,UINT);
WINUSERAPI BOOL WINAPI CheckRadioButton(HWND,int,int,int);
WINUSERAPI UINT WINAPI IsDlgButtonChecked(HWND,int);
WINUSERAPI LRESULT WINAPI SendDlgItemMessageW(HWND,int,UINT,WPARAM,LPARAM);
WINUSERAPI HWND WINAPI GetNextDlgGroupItem(HWND,HWND,BOOL);
WINUSERAPI HWND WINAPI GetNextDlgTabItem(HWND,HWND,BOOL);
WINUSERAPI int WINAPI GetDlgCtrlID(HWND);
WINUSERAPI long WINAPI GetDialogBaseUnits();
WINUSERAPI LRESULT WINAPI DefDlgProcW(HWND,UINT,WPARAM,LPARAM);

#WINUSERAPI BOOL WINAPI CallMsgFilterW(LPMSG,int);

# Clipboard

WINUSERAPI BOOL WINAPI OpenClipboard(HWND);
WINUSERAPI BOOL WINAPI CloseClipboard();

#if (WINVER >= 0x0500)
WINUSERAPI DWORD WINAPI GetClipboardSequenceNumber();
#endif /* WINVER >= 0x0500 */

WINUSERAPI HWND WINAPI GetClipboardOwner();
WINUSERAPI HWND WINAPI SetClipboardViewer(HWND);
WINUSERAPI HWND WINAPI GetClipboardViewer();
WINUSERAPI BOOL WINAPI ChangeClipboardChain(HWND,HWND);
WINUSERAPI HANDLE WINAPI SetClipboardData(UINT,HANDLE);
WINUSERAPI HANDLE WINAPI GetClipboardData(UINT);
#WINUSERAPI UINT WINAPI RegisterClipboardFormatA(LPCSTR);
WINUSERAPI UINT WINAPI RegisterClipboardFormatW(LPCWSTR);
WINUSERAPI int WINAPI CountClipboardFormats();
WINUSERAPI UINT WINAPI EnumClipboardFormats(UINT);
#WINUSERAPI int WINAPI GetClipboardFormatNameA(UINT,LPSTR,int);
WINUSERAPI int WINAPI GetClipboardFormatNameW(UINT,[out,sizeparam=cchMaxCount]LPWSTR,int cchMaxCount);
WINUSERAPI BOOL WINAPI EmptyClipboard();
WINUSERAPI BOOL WINAPI IsClipboardFormatAvailable(UINT);
WINUSERAPI int WINAPI GetPriorityClipboardFormat([out] UINT,int);
WINUSERAPI HWND WINAPI GetOpenClipboardWindow();

# Code page

WINUSERAPI UINT WINAPI GetKBCodePage();

# Touch screen

#if (WINVER >= 0x0601)
# WINUSERAPI BOOL WINAPI GetTouchInputInfo(HTOUCHINPUT,UINT,PTOUCHINPUT,int);
# WINUSERAPI BOOL WINAPI CloseTouchInputHandle(HTOUCHINPUT);
# WINUSERAPI BOOL WINAPI RegisterTouchWindow(HWND,ULONG);
# WINUSERAPI BOOL WINAPI UnregisterTouchWindow(HWND);
# WINUSERAPI BOOL WINAPI IsTouchWindow(HWND,PULONG);
#endif /* WINVER >= 0x0601 */

# Input

#if (_WIN32_WINNT >= 0x0500)
# WINUSERAPI BOOL WINAPI GetLastInputInfo(PLASTINPUTINFO);
#endif /* _WIN32_WINNT >= 0x0500 */

# WINUSERAPI UINT WINAPI MapVirtualKeyA(UINT,UINT);
WINUSERAPI UINT WINAPI MapVirtualKeyW(UINT,UINT);
# WINUSERAPI UINT WINAPI MapVirtualKeyExA(UINT,UINT,HKL);
# WINUSERAPI UINT WINAPI MapVirtualKeyExW(UINT,UINT,HKL);
WINUSERAPI BOOL WINAPI GetInputState();
WINUSERAPI DWORD WINAPI GetQueueStatus(UINT);


#######################################################################
# gdi32

## common
WINGDIAPI BOOL WINAPI DeleteObject(HGDIOBJ);
# WINGDIAPI int WINAPI GetObjectA(HGDIOBJ,int,LPVOID);
WINGDIAPI int WINAPI GetObjectW(HGDIOBJ,int,LPVOID);
WINGDIAPI DWORD WINAPI GetObjectType(HGDIOBJ);
WINGDIAPI HGDIOBJ WINAPI GetStockObject(int);
WINGDIAPI HGDIOBJ WINAPI SelectObject(HDC,HGDIOBJ);

## dc
WINGDIAPI HDC WINAPI CreateCompatibleDC(HDC);
# WINGDIAPI HDC WINAPI CreateDCW(LPCWSTR,LPCWSTR,LPCWSTR,CONST DEVMODEW);
WINGDIAPI BOOL WINAPI DeleteDC(HDC);
WINGDIAPI int WINAPI ExcludeClipRect(HDC,int,int,int,int);
WINGDIAPI int WINAPI IntersectClipRect(HDC,int,int,int,int);

WINGDIAPI HGDIOBJ WINAPI GetCurrentObject(HDC,UINT);

[notCE] WINGDIAPI BOOL WINAPI FrameRgn(HDC,HRGN,HBRUSH,int,int);
[notCE] WINGDIAPI BOOL WINAPI InvertRgn(HDC,HRGN);
[notCE] WINGDIAPI BOOL WINAPI PaintRgn(HDC,HRGN);

WINGDIAPI COLORREF WINAPI SetBkColor(HDC,COLORREF);
WINGDIAPI COLORREF WINAPI GetBkColor(HDC);

[notCE] WINGDIAPI COLORREF WINAPI SetDCBrushColor(HDC,COLORREF);
[notCE] WINGDIAPI COLORREF WINAPI GetDCBrushColor(HDC);
[notCE] WINGDIAPI COLORREF WINAPI SetDCPenColor(HDC,COLORREF);
[notCE] WINGDIAPI COLORREF WINAPI GetDCPenColor(HDC);

WINGDIAPI int WINAPI SetBkMode(HDC,int);
WINGDIAPI int WINAPI GetBkMode(HDC);

[notCE] WINGDIAPI int WINAPI SetMapMode(HDC,int);
[notCE] WINGDIAPI int WINAPI SetPolyFillMode(HDC,int);

WINGDIAPI COLORREF WINAPI SetTextColor(HDC,COLORREF);
WINGDIAPI UINT WINAPI SetTextAlign(HDC,UINT);

[notCE] WINGDIAPI BOOL WINAPI SetTextJustification(HDC,int,int);
[notCE] WINGDIAPI BOOL WINAPI PtVisible(HDC,int,int);

WINGDIAPI BOOL WINAPI RectVisible(HDC,RECT);

# WINGDIAPI BOOL WINAPI GetWorldTransform(HDC,LPXFORM);
# WINGDIAPI BOOL WINAPI SetWorldTransform(HDC,CONST XFORM*);
# WINGDIAPI BOOL WINAPI ModifyWorldTransform(HDC,CONST XFORM*,DWORD);
# WINGDIAPI BOOL WINAPI CombineTransform(LPXFORM,CONST XFORM*,CONST XFORM*);

[notCE] WINGDIAPI BOOL WINAPI SetViewportExtEx(HDC,int,int,SIZE);
[notCE] WINGDIAPI BOOL WINAPI SetViewportOrgEx(HDC,int,int,POINT);
[notCE] WINGDIAPI BOOL WINAPI SetWindowExtEx(HDC,int,int,SIZE);
[notCE] WINGDIAPI BOOL WINAPI SetWindowOrgEx(HDC,int,int,POINT);
[notCE] WINGDIAPI BOOL WINAPI OffsetViewportOrgEx(HDC,int,int,POINT);
[notCE] WINGDIAPI BOOL WINAPI OffsetWindowOrgEx(HDC,int,int,POINT);
[notCE] WINGDIAPI BOOL WINAPI ScaleViewportExtEx(HDC,int,int,int,int,SIZE);
[notCE] WINGDIAPI BOOL WINAPI ScaleWindowExtEx(HDC,int,int,int,int,SIZE);

## bitmap
# WINGDIAPI BOOL WINAPI SetBitmapDimensionEx(HBITMAP,int,int,LPSIZE);

## metafile
# WINGDIAPI HDC WINAPI CreateMetaFileW(LPCWSTR);
# WINGDIAPI BOOL WINAPI DeleteMetaFile(HMETAFILE);
# WINGDIAPI HMETAFILE WINAPI CloseMetaFile(HDC);

## pen
WINGDIAPI HPEN WINAPI CreatePen(int,int,COLORREF);
WINGDIAPI HPEN WINAPI CreatePenIndirect(LOGPEN);

## brush
WINGDIAPI HBRUSH WINAPI CreatePatternBrush(HBITMAP);
WINGDIAPI HBRUSH WINAPI CreateSolidBrush(COLORREF);
# WINGDIAPI HBRUSH WINAPI CreateBrushIndirect(CONST LOGBRUSH*);
[notCE] WINGDIAPI HBRUSH WINAPI CreateHatchBrush(int,COLORREF);


## font
WINGDIAPI HFONT WINAPI CreateFontIndirectW(LOGFONTW);
[notCE] WINGDIAPI HFONT WINAPI CreateFontW(int,int,int,int,int,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPCWSTR);

WINGDIAPI BOOL APIENTRY GetTextExtentExPointW(HDC,LPCWSTR,int,int,LPINT,LPINT,SIZE);
WINGDIAPI BOOL APIENTRY GetTextExtentPoint32W(HDC,LPCWSTR,int,SIZE);

# WINGDIAPI BOOL WINAPI GetTextMetricsW(HDC,TEXTMETRICW);

## region 
WINGDIAPI HRGN WINAPI CreateRectRgn(int,int,int,int);
WINGDIAPI HRGN WINAPI CreateRectRgnIndirect(RECT);
[notCE] WINGDIAPI HRGN WINAPI CreateRoundRectRgn(int,int,int,int,int,int);

# WINGDIAPI HRGN WINAPI CreatePolygonRgn(CONST POINT*,int,int);
# WINGDIAPI HRGN WINAPI CreatePolyPolygonRgn(POINT,CONST INT*,int,int);

[notCE] WINGDIAPI HRGN WINAPI CreateEllipticRgn(int,int,int,int);
[notCE] WINGDIAPI HRGN WINAPI CreateEllipticRgnIndirect(RECT);

WINGDIAPI BOOL WINAPI EqualRgn(HRGN,HRGN);
WINGDIAPI int WINAPI CombineRgn(HRGN,HRGN,HRGN,int);
WINGDIAPI int WINAPI OffsetRgn(HRGN,int,int);
WINGDIAPI BOOL WINAPI SetRectRgn(HRGN,int,int,int,int);
WINGDIAPI BOOL WINAPI PtInRegion(HRGN,int,int);
WINGDIAPI BOOL WINAPI RectInRegion(HRGN,RECT);

## path
[notCE] WINGDIAPI BOOL WINAPI BeginPath(HDC);
[notCE] WINGDIAPI BOOL WINAPI CloseFigure(HDC);
[notCE] WINGDIAPI BOOL WINAPI EndPath(HDC);
[notCE] WINGDIAPI BOOL WINAPI FillPath(HDC);
[notCE] WINGDIAPI BOOL WINAPI FlattenPath(HDC);
# WINGDIAPI int WINAPI GetPath(HDC,LPPOINT,LPBYTE,int);
[notCE] WINGDIAPI HRGN WINAPI PathToRegion(HDC);
[notCE] WINGDIAPI BOOL WINAPI StrokeAndFillPath(HDC);
[notCE] WINGDIAPI BOOL WINAPI StrokePath(HDC);
[notCE] WINGDIAPI BOOL WINAPI WidenPath(HDC);


## drawing
# WINGDIAPI BOOL WINAPI AngleArc(HDC,int,int,DWORD,FLOAT,FLOAT);
[notCE] WINGDIAPI BOOL WINAPI Arc(HDC,int,int,int,int,int,int,int,int);
[notCE] WINGDIAPI BOOL WINAPI ArcTo(HDC,int,int,int,int,int,int,int,int);

[notCE] WINGDIAPI BOOL WINAPI Chord(HDC,int,int,int,int,int,int,int,int);

WINGDIAPI BOOL WINAPI LineTo(HDC,int,int);
WINGDIAPI BOOL WINAPI MoveToEx(HDC,int,int, [nullisvalid] POINT);

WINGDIAPI BOOL WINAPI Ellipse(HDC,int,int,int,int);
[notCE] WINGDIAPI BOOL WINAPI Pie(HDC,int,int,int,int,int,int,int,int);

WINGDIAPI BOOL WINAPI Rectangle(HDC,int,int,int,int);
WINGDIAPI BOOL WINAPI RoundRect(HDC,int,int,int,int,int,int);

[notCE] WINGDIAPI BOOL WINAPI ExtFloodFill(HDC,int,int,COLORREF,UINT);
WINGDIAPI BOOL WINAPI FillRgn(HDC,HRGN,HBRUSH);
[notCE] WINGDIAPI BOOL WINAPI FloodFill(HDC,int,int,COLORREF);

WINGDIAPI BOOL WINAPI BitBlt(HDC,int,int,int,int,HDC,int,int,DWORD);
WINGDIAPI BOOL WINAPI PatBlt(HDC,int,int,int,int,DWORD);
WINGDIAPI BOOL WINAPI StretchBlt(HDC,int,int,int,int,HDC,int,int,int,int,DWORD);
[notCE] WINGDIAPI BOOL WINAPI TransparentBlt(HDC,int,int,int,int,HDC,int,int,int,int,UINT);

# WINGDIAPI BOOL WINAPI Polygon(HDC,CONST POINT*,int);
# WINGDIAPI BOOL WINAPI Polyline(HDC,CONST POINT*,int);
# WINGDIAPI BOOL WINAPI PolyBezier(HDC,CONST POINT*,DWORD);
# WINGDIAPI BOOL WINAPI PolyBezierTo(HDC,CONST POINT*,DWORD);
# WINGDIAPI BOOL WINAPI PolylineTo(HDC,CONST POINT*,DWORD);

# WINGDIAPI BOOL WINAPI PolyDraw(HDC,CONST POINT*,CONST BYTE*,int);
# WINGDIAPI BOOL WINAPI PolyPolygon(HDC,CONST POINT*,CONST INT*,int);
# WINGDIAPI BOOL WINAPI PolyPolyline(HDC,CONST POINT*,CONST DWORD*,DWORD);

# WINGDIAPI BOOL WINAPI AlphaBlend(HDC,int,int,int,int,HDC,int,int,int,int,BLENDFUNCTION);
# WINGDIAPI BOOL WINAPI GradientFill(HDC,PTRIVERTEX,ULONG,PVOID,ULONG,ULONG);

## text
[notCE] WINGDIAPI BOOL WINAPI TextOutW(HDC,int,int,LPCWSTR,int);
WINGDIAPI BOOL WINAPI ExtTextOutW(HDC,int,int,UINT,RECT,LPCWSTR,UINT,[out] INT);
# WINGDIAPI BOOL WINAPI PolyTextOutW(HDC,CONST POLYTEXTW*,int);

## color palette
# WINGDIAPI BOOL WINAPI ColorCorrectPalette(HDC,HPALETTE,DWORD,DWORD);


#######################################################################
## OpenGL

[OpenGL] WINGDIAPI BOOL WINAPI wglCopyContext(HGLRC, HGLRC, UINT);
[OpenGL] WINGDIAPI HGLRC WINAPI wglCreateContext(HDC);
[OpenGL] WINGDIAPI HGLRC WINAPI wglCreateLayerContext(HDC, int);
[OpenGL] WINGDIAPI BOOL WINAPI wglDeleteContext(HGLRC);
[OpenGL] WINGDIAPI HGLRC WINAPI wglGetCurrentContext();
[OpenGL] WINGDIAPI HDC WINAPI wglGetCurrentDC();
# [OpenGL] WINGDIAPI PROC WINAPI wglGetProcAddress(LPCSTR);
[OpenGL] WINGDIAPI BOOL WINAPI wglMakeCurrent(HDC,HGLRC);
[OpenGL] WINGDIAPI BOOL WINAPI wglShareLists(HGLRC,HGLRC);
[OpenGL] WINGDIAPI BOOL WINAPI wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
[OpenGL] WINGDIAPI BOOL WINAPI wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
[OpenGL] WINGDIAPI BOOL WINAPI SwapBuffers(HDC);
# [OpenGL] WINGDIAPI BOOL WINAPI wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);
# [OpenGL] WINGDIAPI BOOL WINAPI wglDescribeLayerPlane(HDC,int,int,UINT,LPLAYERPLANEDESCRIPTOR);
# [OpenGL] WINGDIAPI int WINAPI wglSetLayerPaletteEntries(HDC,int,int,int,CONST COLORREF*);
# [OpenGL] WINGDIAPI int WINAPI wglGetLayerPaletteEntries(HDC,int,int,int,COLORREF*);
[OpenGL] WINGDIAPI BOOL WINAPI wglRealizeLayerPalette(HDC,int,BOOL);
[OpenGL] WINGDIAPI BOOL WINAPI wglSwapLayerBuffers(HDC,UINT);
# [OpenGL] WINGDIAPI DWORD WINAPI wglSwapMultipleBuffers(UINT,CONST WGLSWAP*);

#######################################################################
# commctrl.dll
  
WINCOMMCTRLAPI VOID WINAPI InitCommonControls();
WINCOMMCTRLAPI BOOL WINAPI InitCommonControlsEx(INITCOMMONCONTROLSEX);

[notCE] WINCOMMCTRLAPI HIMAGELIST WINAPI ImageList_LoadImageW([nullisvalid] HINSTANCE,RESOURCEREF,int,int,COLORREF,UINT,UINT);
WINCOMMCTRLAPI int WINAPI ImageList_AddMasked(HIMAGELIST,HBITMAP,COLORREF);

#######################################################################
# commdlg.dll

COMMDLGAPI BOOL  APIENTRY GetOpenFileNameW(OPENFILENAMEW);
COMMDLGAPI BOOL  APIENTRY GetSaveFileNameW(OPENFILENAMEW);

COMMDLGAPI BOOL  APIENTRY ChooseColor(CHOOSECOLOR);
COMMDLGAPI DWORD APIENTRY CommDlgExtendedError();

[notCE]  COMMDLGAPI BOOL  APIENTRY PrintDlgW(PRINTDLGW);

#######################################################################
# gdihelper

WINGDIAPI VOID WINAPI DrawXorBar(HDC,int,int,int,int);

#######################################################################
# CoreDll - PocketPC specific

## power notifications

# COREDLLAPI DWORD  WINAPI GetSystemPowerState(LPWSTR, DWORD, PDWORD);
# COREDLLAPI DWORD  WINAPI SetSystemPowerState(LPCWSTR, DWORD, DWORD);
# COREDLLAPI HANDLE WINAPI SetPowerRequirement(PVOID, CEDEVICE_POWER_STATE, ULONG, PVOID, ULONG);
# COREDLLAPI DWORD  WINAPI ReleasePowerRequirement(HANDLE);

[onlyCE] COREDLLAPI HANDLE WINAPI RequestPowerNotifications(HANDLE, DWORD);
[onlyCE] COREDLLAPI DWORD  WINAPI StopPowerNotifications(HANDLE);

# COREDLLAPI DWORD   WINAPI DevicePowerNotify(PVOID, CEDEVICE_POWER_STATE, DWORD);
# COREDLLAPI HANDLE  WINAPI RegisterPowerRelationship(PVOID, PVOID, PPOWER_CAPABILITIES, DWORD);
# COREDLLAPI DWORD   WINAPI ReleasePowerRelationship(HANDLE);
# COREDLLAPI DWORD   WINAPI SetDevicePower(PVOID, DWORD, CEDEVICE_POWER_STATE);
# COREDLLAPI DWORD   WINAPI GetDevicePower(PVOID, DWORD, PCEDEVICE_POWER_STATE);

[MsgQueue] COREDLLAPI HMSGQUEUE WINAPI CreateMsgQueue (LPCWSTR, MSGQUEUEOPTIONS);
[MsgQueue] COREDLLAPI HMSGQUEUE WINAPI OpenMsgQueue   (HANDLE, HMSGQUEUE, MSGQUEUEOPTIONS);
[MsgQueue] COREDLLAPI BOOL      WINAPI ReadMsgQueue   (HMSGQUEUE, PVOID, DWORD, [out] DWORD, DWORD, [out] DWORD);
[MsgQueue] COREDLLAPI BOOL      WINAPI WriteMsgQueue  (HMSGQUEUE, PVOID, DWORD, DWORD, DWORD);
[MsgQueue] COREDLLAPI BOOL      WINAPI GetMsgQueueInfo(HMSGQUEUE, MSGQUEUEINFO);
[MsgQueue] COREDLLAPI BOOL      WINAPI CloseMsgQueue  (HMSGQUEUE);

#######################################################################
# AYGShell - PocketPC specific

[AYGShell] WINSHELLAPI BOOL WINAPI SHInitExtraControls();
[AYGShell] WINSHELLAPI BOOL WINAPI SHInitDialog(SHINITDLGINFO);
#[AYGShell] WINSHELLAPI HBITMAP WINAPI SHLoadImageResource(HINSTANCE,UINT);
#[AYGShell] WINSHELLAPI HBITMAP WINAPI SHLoadImageFile(LPCWSTR);

[AYGShell] WINSHELLAPI BOOL WINAPI SHCreateMenuBar(SHMENUBARINFO);
[AYGShell] WINSHELLAPI HWND WINAPI SHFindMenuBar(HWND);
# [AYGShell] WINSHELLAPI VOID WINAPI SHNavigateBack();

# [AYGShell] WINSHELLAPI HRESULT WINAPI SHEnableSoftkey(HWND,UINT,BOOL,BOOL);

# [AYGShell] WINSHELLAPI HRESULT WINAPI SHOnPluginDataChange([out] CLSID);

[AYGShell] WINSHELLAPI BOOL WINAPI SHHandleWMActivate(HWND,WPARAM,LPARAM,SHACTIVATEINFO,DWORD);
[AYGShell] WINSHELLAPI BOOL WINAPI SHHandleWMSettingChange(HWND,WPARAM,LPARAM,SHACTIVATEINFO);

# [AYGShell] WINSHELLAPI BOOL WINAPI SHSipPreference(HWND, SIPSTATE);
# [AYGShell] WINSHELLAPI DWORD WINAPI SHRecognizeGesture([out] SHRGINFO);

[AYGShell] WINSHELLAPI BOOL WINAPI SHFullScreen(HWND,DWORD);

[AYGShell] WINSHELLAPI BOOL WINAPI SHDoneButton(HWND,DWORD);

# [AYGShell] WINSHELLAPI BOOL WINAPI SHGetAutoRunPath(LPTSTR);

# [AYGShell] WINSHELLAPI BOOL WINAPI SHSetNavBarText(HWND hwndRequester, LPCTSTR pszText);
# [AYGShell] WINSHELLAPI VOID WINAPI SHInputDialog(HWND hwnd, UINT uMsg, WPARAM wParam);

# [AYGShell] WINSHELLAPI HRESULT WINAPI SHGetUIMetrics(SHUIMETRIC,PVOID,DWORD,[out] DWORD);

[AYGShell] WINSHELLAPI BOOL WINAPI SHSetAppKeyWndAssoc(BYTE,HWND);

#######################################################################
# commctrl - PocketPC specific

[CommandBar] WINCOMMCTRLAPI HWND WINAPI CommandBar_Create(HINSTANCE, HWND, int);
[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBar_Show(HWND, BOOL);
[CommandBar] WINCOMMCTRLAPI int WINAPI CommandBar_AddBitmap(HWND, HINSTANCE, int, int, int, int);
[CommandBar] WINCOMMCTRLAPI HWND WINAPI CommandBar_InsertComboBox(HWND, HINSTANCE, int, UINT, WORD, WORD);
[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBar_InsertMenubar(HWND, HINSTANCE, WORD, WORD);
[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBar_InsertMenubarEx(HWND, HINSTANCE, LPTSTR, WORD);
[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBar_DrawMenuBar(HWND, WORD);
[CommandBar] WINCOMMCTRLAPI HMENU WINAPI CommandBar_GetMenu(HWND, WORD);
[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBar_AddAdornments(HWND, DWORD, DWORD);
[CommandBar] WINCOMMCTRLAPI void WINAPI CommandBar_AlignAdornments(HWND);
[CommandBar] WINCOMMCTRLAPI int WINAPI CommandBar_Height(HWND);
[CommandBar] WINCOMMCTRLAPI BOOL WINAPI IsCommandBarMessage(HWND, MSG);

#[CommandBar] WINCOMMCTRLAPI HWND WINAPI CommandBands_Create(HINSTANCE, HWND, UINT, DWORD, HIMAGELIST);
#[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBands_AddBands(HWND, HINSTANCE, UINT, LPREBARBANDINFO);
#[CommandBar] WINCOMMCTRLAPI HWND WINAPI CommandBands_GetCommandBar(HWND, UINT);
#[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBands_AddAdornments(HWND, HINSTANCE, DWORD, LPREBARBANDINFO);
#[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBands_Show(HWND, BOOL fShow);
#[CommandBar] WINCOMMCTRLAPI BOOL WINAPI CommandBands_GetRestoreInformation(HWND, UINT, LPCOMMANDBANDSRESTOREINFO);

#######################################################################
# ConnMgr - PocketPC specific

# [onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrEnumDestinations(int,CONNMGR_DESTINATION_INFO*);
[onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrEstablishConnection(CONNMGR_CONNECTIONINFO,[out] HANDLE);
[onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrEstablishConnectionSync(CONNMGR_CONNECTIONINFO,[out] HANDLE,DWORD,[out] DWORD);
[onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrConnectionStatus(HANDLE,[out] DWORD);
[onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrReleaseConnection(HANDLE,LONG);
[onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrSetConnectionPriority(HANDLE,DWORD);
# [onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrProviderMessage(HANDLE,const GUID*,DWORD*,DWORD,DWORD,PBYTE,ULONG);
# [onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrRegisterScheduledConnection(SCHEDULEDCONNECTIONINFO*);
# [onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrUnregisterScheduledConnection(LPCWSTR);
[onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrMapURL(LPCWSTR,GUID,[out] DWORD);
[onlyCE] CELLCOREAPI HANDLE WINAPI ConnMgrApiReadyEvent();
# [onlyCE] CELLCOREAPI HRESULT WINAPI ConnMgrMapConRef(ConnMgrConRefTypeEnum,LPCWSTR,PGUID);

#######################################################################
# shellapi

SHSTDAPI BOOL WINAPI Shell_NotifyIconW(DWORD, NOTIFYICONDATAW);
SHSTDAPI UINT_PTR WINAPI SHAppBarMessage(DWORD,APPBARDATA);

#######################################################################
# WinNls

WINBASEAPI BOOL WINAPI IsValidCodePage(UINT);
WINBASEAPI UINT WINAPI GetACP();

WINBASEAPI UINT WINAPI GetOEMCP();
# WINBASEAPI BOOL WINAPI GetCPInfo(UINT,LPCPINFO);

# WINBASEAPI BOOL WINAPI GetCPInfoExA(UINT,DWORD,LPCPINFOEXA);
# WINBASEAPI BOOL WINAPI GetCPInfoExW(UINT,DWORD,LPCPINFOEXW);

WINBASEAPI BOOL WINAPI IsDBCSLeadByte(BYTE);
WINBASEAPI BOOL WINAPI IsDBCSLeadByteEx(UINT,BYTE);

WINBASEAPI int WINAPI MultiByteToWideChar(UINT,DWORD,LPCSTR,int,[out,sizeparam=cchWideChar]LPWSTR,int cchWideChar);
WINBASEAPI int WINAPI WideCharToMultiByte(UINT,DWORD,LPCWSTR,int,LPSTR,int,LPCSTR,[out] BOOL);
