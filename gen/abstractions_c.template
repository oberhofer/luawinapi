//////////////////////////////////////////////////////////////////////////
/**

  luawinapi - winapi wrapper for Lua
  Copyright (C) 2011 Klaus Oberhofer. See copyright notice in
  LICENSE file
  
  $(generatedbymessage)

*/////////////////////////////////////////////////////////////////////////

#include <windows.h>

#ifdef USE_AYGSHELL
#include <aygshell.h>
#endif

#include "gen_abstractions.h"
#include "gen_structs.h"

//#for abstname, abst in pairs(abstractiondefs) do
//#  prerequisite_begin(abst, _put) 
// used to identify the type
const char* $(abstname)_Typename = "$(abstname)";

// push on stack
int lua_push$(abstname)( lua_State *L, $(abst.handle) hdl )
{
  if (NULL == hdl)
  {
    // return nil
    return 0;
  }

  // lookup handle in handle map
  luaL_getmetatable(L, $(abstname)_Typename);
  lua_pushstring(L, "$Handles");
  lua_rawget(L, -2);                      // stack: $Handles | metatable

  lua_pushlightuserdata(L, hdl);
  lua_rawget(L, -2);                      // stack: nil/object | $Handles | metatable

  if (lua_isnil(L, -1))
  {
    $(abst.handle)* ud;
  
    // pop nil value
    lua_pop(L, 1);

    // push userdata
    ud = ($(abst.handle)*)lua_newuserdata(L, sizeof($(abst.handle)));
    *ud = hdl;                              // stack: object | $Handles | metatable

    // set metatable
    lua_pushvalue(L, -3);
    lua_setmetatable(L, -2);

    // push key/value for lookup table
    lua_pushlightuserdata(L, hdl);
    lua_pushvalue(L, -2);                 // stack: object |  key  | object | $Handles | metatable

    // add item to lookup table
    lua_rawset(L, -4);                    // stack: object | $Handles | metatable
  }

  // cleanup stack (remove $Handles | metatable)
  lua_remove(L, -2);
  lua_remove(L, -2);

  return 1;
}

// get from stack
$(abst.handle) lua_to$(abstname)( lua_State *L, int idx )
{
  $(abst.handle) v = 0;
  switch (lua_type(L, idx))
  {
    case LUA_TNIL:
      {
      }
      break;
    case LUA_TLIGHTUSERDATA:
      {
        v = ($(abst.handle))lua_touserdata(L, idx);
      }
      break;
    case LUA_TNUMBER:
      {
        v = ($(abst.handle))lua_tointeger(L, idx);
      }
      break;
    case LUA_TUSERDATA:
      {
        $(abst.handle)* ud  = ($(abst.handle)*)luaL_checkudata(L, idx, $(abstname)_Typename);
        v = *ud;
      }
      break;
    default:
      {
        const char *msg = lua_pushfstring(L, "$(abstname) (handle) expected but got %s", luaL_typename(L, idx));
        luaL_argerror(L, idx, msg);
      }
      break;
  }
  return v;
}

// implements __index metamethod (for .handle attribute)
static int $(abstname)_index(lua_State *L)
{
  $(abst.handle)* ud  = ($(abst.handle)*)luaL_checkudata(L, 1, $(abstname)_Typename);

  const char* stridx = lua_tolstring(L, 2, NULL);

  // check for .handle
  if (0 == strcmp(stridx, "handle"))
  {
    lua_pushlightuserdata(L, *ud);
    return 1;
  }
  else
  {
    luaL_getmetafield(L, 1, stridx);
  }

  return 1;
}

// to wrap handle in an object
static int $(abstname)_wrap(lua_State *L)
{
  $(abst.handle) handle = 0;

  if (lua_isnil(L, -1))
  {
    // lua_pushnil(L);
    // return 1;
  }
  else if (lua_islightuserdata(L, -1))
  {
    handle = ($(abst.handle))(lua_touserdata(L, -1));
  }
  else if (lua_isuserdata(L, -1))
  {
    handle = ($(abst.handle))luaL_checkudata(L, -1, $(abstname)_Typename);
  }
  else if (lua_isnumber(L, -1))
  {
    handle = ($(abst.handle))lua_tointeger(L, -1);
  }
  
  return lua_push$(abstname)(L, handle);
}


static const struct luaL_Reg $(abstname)_Methods[ ] = {
  { "__index", $(abstname)_index},
  { "wrap", $(abstname)_wrap },
//#  for _, func in ipairs(abst.methods) do
//#     prerequisite_begin(func, _put)
  { "$(func.name)",  winapi_$(func.name) },
//#     prerequisite_end(func, _put)
//#  end
  { NULL, NULL }
};

static const struct luaL_Reg $(abstname)_WrapMethods[ ] = {
  { "Wrap$(abstname)", $(abstname)_wrap },
  { NULL, NULL }
};

//#  prerequisite_end(abst, _put) 
//#end

//////////////////////////////////////////////////////////////////////////
/**

  registers abstractions as Lua types

  @param[in]  L  pointer lua state

*/////////////////////////////////////////////////////////////////////////
void registerAbstractions(lua_State *L)
{
  // register package functions
//#for abstname, abst in pairs(abstractiondefs) do
//#  prerequisite_begin(abst, _put) 
#if (LUA_VERSION_NUM > 501)
  luaL_setfuncs(L, $(abstname)_WrapMethods, 0);
#else
  luaL_openlib(L, NULL, $(abstname)_WrapMethods, 0);
#endif

  luaL_newmetatable(L, $(abstname)_Typename);
  lua_pushstring(L, "$Handles");
  lua_newtable(L);
  lua_rawset(L, -3);
//  lua_pushstring(L, "__index");
//  lua_newtable(L);
#if (LUA_VERSION_NUM > 501)
  luaL_setfuncs(L, $(abstname)_Methods, 0);
#else
  luaL_openlib(L, NULL, $(abstname)_Methods, 0);
#endif
//  lua_rawset(L, -3);
  lua_pop(L, 1);

//#  prerequisite_end(abst, _put) 
//#end
}

